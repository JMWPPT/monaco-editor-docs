import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as p,a as l,b as s,d as n,w as e,e as a}from"./app-39581384.js";const d={},u=l("h1",{id:"position",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#position","aria-hidden":"true"},"#"),s(" Position")],-1),D=l("code",null,"class",-1),h={href:"https://microsoft.github.io/monaco-editor/typedoc/classes/Position.html",target:"_blank",rel:"noopener noreferrer"},y=l("h2",{id:"构造方法-constructors",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#构造方法-constructors","aria-hidden":"true"},"#"),s(" 构造方法 Constructors")],-1),_=l("li",null,[s("语法: "),l("code",null,"new Position(lineNumber: number, column: number): Position")],-1),b=l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("lineNumber: "),l("code",null,"number")]),l("li",null,[s("column: "),l("code",null,"number")])])],-1),m=a('<h2 id="参数-properties" tabindex="-1"><a class="header-anchor" href="#参数-properties" aria-hidden="true">#</a> 参数 Properties</h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> column</h3><ul><li>类型: <code>number</code> <code>只读</code></li><li>默认值: <code>-</code></li><li>可选项: <code>-</code></li><li>描述: <code>列</code></li></ul><h3 id="linenumber" tabindex="-1"><a class="header-anchor" href="#linenumber" aria-hidden="true">#</a> lineNumber</h3><ul><li>类型: <code>number</code> <code>只读</code></li><li>默认值: <code>-</code></li><li>可选项: <code>-</code></li><li>描述: <code>行号</code></li></ul><h2 id="方法-methods" tabindex="-1"><a class="header-anchor" href="#方法-methods" aria-hidden="true">#</a> 方法 Methods</h2><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h3>',7),C=l("li",null,[s("语法: "),l("code",null,"clone(): Position")],-1),f=l("li",null,[s("参数: "),l("code",null,"-")],-1),P=l("li",null,[s("描述: "),l("code",null,"克隆这个位置对象")],-1),E=l("h3",{id:"delta",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#delta","aria-hidden":"true"},"#"),s(" delta")],-1),v=a("<li>语法: <code>delta(deltaLineNumber?: number, deltaColumn?: number): Position</code></li><li>参数: <ul><li>deltaLineNumber： <code>number</code> <code>可选</code></li><li>deltaColumn： <code>number</code> <code>可选</code></li></ul></li>",2),A=l("li",null,[s("描述: "),l("code",null,"将节点移动对应的位置")],-1),I=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">这里和with方法做一个区分</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">position</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Position</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">position</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">delta</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">))； </span></span>
<span class="line"><span style="color:#6A9955;">//  Position(column: 5，lineNumber: 3);</span></span>
<span class="line"><span style="color:#6A9955;">// 可以看出是将传入的行和列和原始的行和列相加得到的结果</span></span>
<span class="line"><span style="color:#6A9955;">// 有意思的是如果传递的是负数 ，依然能够得到结果</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">position</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">delta</span><span style="color:#D4D4D4;">(-</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#6A9955;">// Position(column: -1，lineNumber: 1);</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals</h3>`,2),g=l("li",null,[s("语法: "),l("code",null,"equals(other: IPosition): boolean")],-1),x=l("code",null,"other",-1),B=l("li",null,[s("返回值: "),l("code",null,"boolean")],-1),F=l("li",null,[s("描述: "),l("code",null,"返回和传入的poditon是否相等")],-1),w=l("h3",{id:"isbefore",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#isbefore","aria-hidden":"true"},"#"),s(" isBefore")],-1),q=l("li",null,[s("语法: "),l("code",null,"isBefore(other: IPosition): boolean")],-1),k=l("li",null,[s("返回值: "),l("code",null,"boolean")],-1),N=l("li",null,[s("描述: "),l("code",null,"判断一个位置是否在传入位置之前，如果相等，则返回false")],-1),j=l("h3",{id:"isbeforeorequal",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#isbeforeorequal","aria-hidden":"true"},"#"),s(" isBeforeOrEqual")],-1),L=l("li",null,[s("语法: "),l("code",null,"isBeforeOrEqual(other: IPosition): boolean")],-1),O=l("li",null,[s("返回值: "),l("code",null,"boolean")],-1),V=l("li",null,[s("描述: "),l("code",null,"判断一个位置是否在传入位置之前，如果相等，则返回true")],-1),S=a('<h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><ul><li>语法: <code>toString(): string</code></li><li>参数: <code>-</code></li><li>返回值: <code>string</code></li><li>描述: <code>字符串格式化</code></li></ul><h3 id="with" tabindex="-1"><a class="header-anchor" href="#with" aria-hidden="true">#</a> with</h3><ul><li>语法: <code>with(newLineNumber?: number, newColumn?: number): Position</code></li><li>参数: ``</li><li>返回值: <code>-</code></li><li>描述: <code>with 看起来的效果是复制了复制了一个新的position，看起来和new了一个差不多</code></li></ul><h3 id="compare" tabindex="-1"><a class="header-anchor" href="#compare" aria-hidden="true">#</a> compare</h3>',5),R=l("li",null,[s("语法: "),l("code",null,"compare(a: IPosition, b: IPosition): number")],-1),M=l("li",null,[s("类型： "),l("code",null,"static")],-1),T=l("li",null,[s("返回值: "),l("code",null,"number")],-1),z=l("li",null,[s("描述: "),l("code",null,"比较两个节点的差值")],-1),G=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Position</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Position</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Position</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">compare</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#6A9955;">// -1  linenumber 不相等时比较行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Position</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Position</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Position</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">compare</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p2</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#6A9955;">// -7  linenumber 相等时比较column</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="equals-1" tabindex="-1"><a class="header-anchor" href="#equals-1" aria-hidden="true">#</a> equals</h3>`,2),H=l("li",null,[s("语法: "),l("code",null,"equals(a: IPosition, b: IPosition): boolean")],-1),J=l("li",null,[s("类型： "),l("code",null,"static")],-1),K=l("li",null,[s("返回值: "),l("code",null,"number")],-1),Q=l("li",null,[s("描述: "),l("code",null,"比较两个节点是否相等")],-1),U=l("h3",{id:"isbefore-1",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#isbefore-1","aria-hidden":"true"},"#"),s(" isBefore")],-1),W=l("li",null,[s("语法: "),l("code",null,"isBefore(a: IPosition, b: IPosition): boolean")],-1),X=l("li",null,[s("类型： "),l("code",null,"static")],-1),Y=l("li",null,[s("返回值: "),l("code",null,"number")],-1),Z=l("li",null,[s("描述: "),l("code",null,"判断一个位置是否在传入位置之前，如果相等，则返回false")],-1),$=l("h3",{id:"isbeforeorequal-1",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#isbeforeorequal-1","aria-hidden":"true"},"#"),s(" isBeforeOrEqual")],-1),ll=l("li",null,[s("语法: "),l("code",null,"isBeforeOrEqual(a: IPosition, b: IPosition): boolean")],-1),sl=l("li",null,[s("类型： "),l("code",null,"static")],-1),nl=l("li",null,[s("返回值: "),l("code",null,"number")],-1),ol=l("li",null,[s("描述: "),l("code",null,"判断一个位置是否在传入位置之前，如果相等，则返回true")],-1),el=a('<h3 id="isiposition" tabindex="-1"><a class="header-anchor" href="#isiposition" aria-hidden="true">#</a> isIPosition</h3><ul><li>语法: <code>isIPosition(obj: any): obj is IPosition</code></li><li>类型： <code>static</code></li><li>参数: <ul><li>obj: any</li></ul></li><li>返回值: <code>obj is IPosition</code></li><li>描述: <code>判断节点是否是IPosition</code></li></ul><h3 id="lift" tabindex="-1"><a class="header-anchor" href="#lift" aria-hidden="true">#</a> lift</h3>',3),al=l("li",null,[s("语法: "),l("code",null,"lift(pos: IPosition): Position")],-1),il=l("li",null,[s("类型： "),l("code",null,"static")],-1),tl=l("li",null,[s("描述: "),l("code",null,"基于IPosition 创建一个Position")],-1);function cl(rl,pl){const t=i("ExternalLinkIcon"),o=i("RouterLink");return r(),p("div",null,[u,l("p",null,[D,s(),l("a",h,[s("官网地址"),n(t)])]),y,l("ul",null,[_,b,l("li",null,[s("返回值: "),n(o,{to:"/global/classes/Position.html"},{default:e(()=>[s("Position")]),_:1})])]),m,l("ul",null,[C,f,l("li",null,[s("返回值: "),n(o,{to:"/global/classes/Position.html"},{default:e(()=>[s("Position")]),_:1})]),P]),E,l("ul",null,[v,l("li",null,[s("返回值: "),n(o,{to:"/global/classes/Position.html"},{default:e(()=>[s("Position")]),_:1})]),A]),I,l("ul",null,[g,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[x,s(": "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),B,F]),w,l("ul",null,[q,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("other: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),k,N]),j,l("ul",null,[L,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("other: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),O,V]),S,l("ul",null,[R,M,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("a: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})]),l("li",null,[s("b: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),T,z]),G,l("ul",null,[H,J,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("a: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})]),l("li",null,[s("b: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),K,Q]),U,l("ul",null,[W,X,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("a: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})]),l("li",null,[s("b: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),Y,Z]),$,l("ul",null,[ll,sl,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("a: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})]),l("li",null,[s("b: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),nl,ol]),el,l("ul",null,[al,il,l("li",null,[s("参数: "),l("ul",null,[l("li",null,[s("pos: "),n(o,{to:"/global/interfaces/IPosition.html"},{default:e(()=>[s("IPosition")]),_:1})])])]),l("li",null,[s("返回值: "),n(o,{to:"/global/classes/Position.html"},{default:e(()=>[s("Position")]),_:1})]),tl])])}const Dl=c(d,[["render",cl],["__file","Position.html.vue"]]);export{Dl as default};
