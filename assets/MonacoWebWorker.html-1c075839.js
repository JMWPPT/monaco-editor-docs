import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as s,a as e,b as o,d as t,w as a,e as d}from"./app-39581384.js";const h={},u=e("h1",{id:"monacowebworker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#monacowebworker","aria-hidden":"true"},"#"),o(" MonacoWebWorker")],-1),_=e("code",null,"interface",-1),m={href:"https://microsoft.github.io/monaco-editor/docs.html#interfaces/editor.MonacoWebWorker.html",target:"_blank",rel:"noopener noreferrer"},f=d('<h2 id="方法-methods" tabindex="-1"><a class="header-anchor" href="#方法-methods" aria-hidden="true">#</a> 方法 Methods</h2><h3 id="dispose" tabindex="-1"><a class="header-anchor" href="#dispose" aria-hidden="true">#</a> dispose</h3><ul><li>语法: <code>dispose(): void</code></li><li>参数: ``</li><li>返回值: <code>-</code></li><li>描述: <code>终止网络进程，从而使返回的代理无效。</code></li></ul><h3 id="getproxy" tabindex="-1"><a class="header-anchor" href="#getproxy" aria-hidden="true">#</a> getProxy</h3><ul><li>语法: <code>getProxy(): Promise&lt;T&gt;</code></li><li>参数: ``</li><li>返回值: <code>-</code></li><li>描述: <code>获取任意加载代码的代理。</code></li></ul><h3 id="withsyncedresources" tabindex="-1"><a class="header-anchor" href="#withsyncedresources" aria-hidden="true">#</a> withSyncedResources</h3>',6),p=e("li",null,[o("语法: "),e("code",null,"withSyncedResources(resources: Uri[]): Promise<T>")],-1),b=e("li",null,[o("返回值: "),e("code",null,"Promise<T>")],-1),x=e("li",null,[o("描述: "),e("code",null,"将资源中的模型同步（发送）到网络工作者，使它们在 monaco.worker.getMirrorModels() 中可用。")],-1);function k(w,g){const i=r("ExternalLinkIcon"),l=r("RouterLink");return n(),s("div",null,[u,e("p",null,[_,o(),e("a",m,[o("官网地址"),t(i)]),o(" 可以为任意文件提供代理的web进程。")]),f,e("ul",null,[p,e("li",null,[o("参数: "),e("ul",null,[e("li",null,[o("resources： "),t(l,{to:"/global/classes/Url.html"},{default:a(()=>[o("Url")]),_:1}),o("[]")])])]),b,x])])}const M=c(h,[["render",k],["__file","MonacoWebWorker.html.vue"]]);export{M as default};
